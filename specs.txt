


DONE:
---------------------------------------------------------------

* plugin architecture
  - pass commandline args to plugin

* state machine

* eventing system
  - using python decorators?
  - grouped into the different subsystems:
   - hardware
   - gui
   - osc

* basics
  - twisted logging 
  - --debug flag toggles log level
  - restart on crash 
  
* usage: spark [spark options] <application> [app options]


* graphics display (clutter), easy fullscreen
* GUI status window
  - system status area
  - log area



monitors
 - network
 - power

* system sanity checking
  - internet connection
  - power connection
  - easy-to-write custom sanity checks


* hardware detection plug and play
 - plug & play of devices
 - webcams
  - serial ports
  - automatic mapping of detected hardware onto service classes;
    protocol sniffing / probing for serial devices


TO DO:
---------------------------------------------------------------

* graphics widget library (mxpy)
* onscreen keyboard


hardware.protocols -- various hardware protocols



* hardware detection plug and play
  - rfid readers (sonmicro, stronglink)
  - generic packet-based binary serial protocol
  - HID devices

* remote control (OSC)
  standard interface into the machine state and connected devices

* easy to write and plug own services
  - based on hardware

